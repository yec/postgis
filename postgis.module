<?php

/**
 * @file
 * Main file of this module. Loads include files and implements general hooks.
 */

module_load_include('inc', 'postgis', '/includes/postgis.feeds');
module_load_include('inc', 'postgis', '/includes/postgis.field');
module_load_include('inc', 'postgis', '/includes/postgis.field.formatter');
module_load_include('inc', 'postgis', '/includes/postgis.field.widget');
module_load_include('inc', 'postgis', '/includes/postgis.geometry');
module_load_include('inc', 'postgis', '/includes/postgis.openlayers');

define('POSTGIS_DEFAULT_SRID', 4326);

/**
 * Implements hook_ctools_plugin_api().
 *
 * Required for OpenLayers integration.
 */
function postgis_ctools_plugin_api($module, $api) {
  if ($module == 'openlayers') {
    switch ($api) {
      case 'openlayers_maps':
        return array('version' => 1);

      case 'openlayers_layers':
        return array('version' => 1);
    }
  } 
  elseif ($module == 'geoserver') {
    switch ($api) {
      case 'geoserver_layer_types':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function postgis_ctools_plugin_directory($module, $plugin) {
  if ($module == 'geoserver' && $plugin == 'layer_types') {
    return 'plugins/geoserver/layer_types';
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function postgis_ctools_plugin_type() {
  return array('layer_types' => array());
}

/**
 * Implements hook_help().
 */
function postgis_help($path, $arg) {
  switch ($path) {
    case 'admin/help#postgis':
      return t('This module requires a PostGIS 1.5 enabled PostgreSQL database. See the PostGIS documentation on <a href="@link">how to install PostGIS</a>. To manage geospatial content add a PostGIS field to any <a href="@types">content type</a> you like.', array('@link' => 'http://postgis.org/documentation/manual-1.5/ch02.html', '@types' => url('admin/structure/types')));
  }
}

/**
 * AJAX callback; fills the form of a PostGIS GeoServer layer with default values of a given field instance.
 * 
 * @param array $form
 * @param array $form_state
 * 
 * @return array 
 */
function postgis_geoserver_layer_type_form($form, &$form_state) {
  
  $field = explode('.', $form['layer']['data']['field']['#value']);
  $layer = new geoserver_layer_type_postgis_field();
  $layer->load_field($field[0], $field[1], $field[2]);
  
  $form['layer']['data']['srid']['#value'] = $layer->data['srid'];
  $form['layer']['data']['geometry_name']['#value'] = $layer->data['geometry_name'];
  $form['layer']['data']['geometry_type']['#value'] = $layer->data['geometry_type'];
  $form['layer']['data']['bounding_box']['minx']['#value'] = $layer->data['bounding_box']['minx'];
  $form['layer']['data']['bounding_box']['miny']['#value'] = $layer->data['bounding_box']['miny'];
  $form['layer']['data']['bounding_box']['maxx']['#value'] = $layer->data['bounding_box']['maxx'];
  $form['layer']['data']['bounding_box']['maxy']['#value'] = $layer->data['bounding_box']['maxy'];
  $form['layer']['data']['sql']['#value'] = $layer->data['sql'];
  
  return array(
    $form['layer']['data']['srid'],
    $form['layer']['data']['geometry_name'],
    $form['layer']['data']['geometry_type'],
    $form['layer']['data']['bounding_box'],
    $form['layer']['data']['sql'],
  );
}